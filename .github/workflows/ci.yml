name: CI - Build , Test and Push

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Add permissions to allow package creation and pushing
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
      image-name: ${{ steps.build-image.outputs.image-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry --version
        env:
          POETRY_VERSION: 2.1.3

      - name: Install dependencies
        run: |
          poetry install --no-root
          
      - name: Lint and Test (Placeholder)
        run: |
          # Add your linting and testing commands here
          # For example:
          # poetry run ruff check .
          # poetry run pytest
          echo "Linting and testing step (to be implemented)"

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)
          # Replace 'learn-kube-app' with your desired application name
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/learn-kube-app
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile .
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Successfully built $IMAGE_NAME:$IMAGE_TAG"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME_WITH_TAG="${{ steps.build-image.outputs.image-name }}:${{ steps.build-image.outputs.image-tag }}"
          echo "Pushing $IMAGE_NAME_WITH_TAG"
          docker push $IMAGE_NAME_WITH_TAG
          
          # Optionally, push a 'latest' tag or a tag based on the branch
          # For example, if on main branch, tag as latest
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker tag $IMAGE_NAME_WITH_TAG ${{ steps.build-image.outputs.image-name }}:latest
            docker push ${{ steps.build-image.outputs.image-name }}:latest
            echo "Also pushed ${{ steps.build-image.outputs.image-name }}:latest"
          fi
          
      - name: Save image info for CD workflow
        if: github.event_name == 'push'
        run: |
          echo "${{ steps.build-image.outputs.image-tag }}" > image-tag.txt
          echo "${{ steps.build-image.outputs.image-name }}" > image-name.txt
          
      - name: Upload image info as artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: image-info
          path: |
            image-tag.txt
            image-name.txt
          retention-days: 1
          
      - name: Output Image Info
        run: |
          echo "::notice::New image built and pushed: ${{ steps.build-image.outputs.image-name }}:${{ steps.build-image.outputs.image-tag }}"
          echo "To update your deployment manually:"
          echo "kubectl set image deployment/learn-kube-deployment learn-kube-container=${{ steps.build-image.outputs.image-name }}:${{ steps.build-image.outputs.image-tag }}"
